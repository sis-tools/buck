{namespace cxx_common}

/**
 * @param? sample_file_name File name to use in samples. If null, defaults to 'foo/bar.c'.
 */
{template .srcs_arg}
{call buck.arg}
  {param name : 'srcs' /}
  {param default : '[]' /}
  {param desc}
  The set of C, C++, Objective-C, Objective-C++, or assembly source files
  to be preprocessed, compiled, and assembled by this
  rule.  We determine which stages to run on each input source based on its file extension. See the
  {sp}<a href="https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html">GCC documentation</a>{sp}
  for more detail on how file extensions are interpreted. Each element can be either a string
  specifying a source file (e.g. <code>'{$sample_file_name ?: 'foo/bar.c'}'</code>) or a tuple of
  a string specifying a source file and a list of compilation flags
  (e.g. <code>('{$sample_file_name ?: 'foo/bar.c'}', ['-Wall', '-Werror'])
  </code>). In the latter case the specified flags will be used in addition to the rule's other
  flags when preprocessing and compiling that file (if applicable).
  {/param}
{/call}
{/template}

/***/
{template .platform_srcs_arg}
{call buck.arg}
  {param name : 'platform_srcs' /}
  {param default : '[]' /}
  {param desc}
  Platform specific source files. These should be specified as a list of pairs where the first
  element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform
  name is matched, and the second element is either a list of source files or a list of tuples of
  source files and a list of compilation flags to be preprocessed, compiled and assembled if the
  platform matches the regex. See <code>srcs</code> for more information.
  {/param}
{/call}
{/template}

/***/
{template .supported_platforms_regex_arg}
{call buck.arg}
  {param name : 'supported_platforms_regex' /}
  {param default : 'None' /}
  {param desc}
  If present, an un-anchored regex (in java.util.regex.Pattern syntax) that matches all platforms
  that this library supports. It will not be built for other platforms.
  {/param}
{/call}
{/template}

/***/
{template .headers_arg}
{call buck.arg}
  {param name : 'headers' /}
  {param default : '[]' /}
  {param desc}
  The set of header files that are made available for inclusion to the source files in this
  target. These should be specified as either a list
  of header files or a dictionary of header names to header files. The header name can contain
  forward slashes (<code>/</code>).  The headers can be included with <code>#include
  "$HEADER_NAMESPACE/$HEADER_NAME"</code> or <code>#include &lt;$HEADER_NAMESPACE/$HEADER_NAME&gt;
  </code>, where <code>$HEADER_NAMESPACE</code> is the value of the target's <code>header_namespace
  </code> attribute, and <code>$HEADER_NAME</code> is the header name if specified, and the filename
  of the header file otherwise. See <code>header_namespace</code> for more information.
  {/param}
{/call}
{/template}

/***/
{template .platform_headers_arg}
{call buck.arg}
  {param name : 'platform_headers' /}
  {param default : '[]' /}
  {param desc}
  Platform specific header files. These should be specified as a list of pairs where the first
  element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform
  name is matched, and the second element is either a list of header files or a dictionary of
  header names to header files that will be made available for inclusion to the source files in the
  target if the platform matches the regex. See <code>headers</code> for more information.
  {/param}
{/call}
{/template}

/***/
{template .exported_headers_arg}
{call buck.arg}
  {param name : 'exported_headers' /}
  {param default : '[]' /}
  {param desc}
  The set of header files that are made available for inclusion to the source files in the
  target and all targets that transitively depend on it. These should be specified as either a list
  of header files or a dictionary of header names to header files. The headers can be included
  with <code>#include "$HEADER_NAMESPACE/$HEADER_NAME"</code> or <code>#include
  &lt;$HEADER_NAMESPACE/$HEADER_NAME&gt;</code>, where <code>$HEADER_NAMESPACE</code> is the value
  of the target's <code>header_namespace</code> attribute, and <code>$HEADER_NAME</code> is the
  header name if specified, and the filename of the header file otherwise. Note that the header name
  can contain forward slashes (<code>/</code>). See <code>header_namespace</code> for more
  information.
  {/param}
{/call}
{/template}

/***/
{template .exported_platform_headers_arg}
{call buck.arg}
  {param name : 'exported_platform_headers' /}
  {param default : '[]' /}
  {param desc}
  Platform specific header files. These should be specified as a list of pairs where the first
  element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform
  name is matched, and the second element is either a list of header files or a dictionary of
  header names to header files that will be made available for inclusion to the source files in the
  target and all targets that transitively depend on it if the platform matches the regex.
  See <code>headers</code> for more information.
  {/param}
{/call}
{/template}

/***/
{template .header_namespace_arg}
{call buck.arg}
  {param name : 'header_namespace' /}
  {param default : 'name' /}
  {param desc}
  A path prefix when including headers of this target. Defaults to the path from the root of the
  repository to the directory where this target is defined. Can
  contain forward slashes (<code>/</code>), but cannot start with one. See <code>headers</code> for
  more information.
  {/param}
{/call}
{/template}

/***/
{template .preprocessor_flags_arg}
{call buck.arg}
  {param name : 'preprocessor_flags' /}
  {param default : '[]' /}
  {param desc}
  Flags to use when preprocessing any of the above sources (which require preprocessing).
  {/param}
{/call}
{/template}

/***/
{template .platform_preprocessor_flags_arg}
{call buck.arg}
  {param name : 'platform_preprocessor_flags' /}
  {param default : '[]' /}
  {param desc}
  Platform specific preprocessor flags. These should be specified as a list of pairs where the first
  element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform
  name is matched, and the second element is a list of flags to use when preprocessing the target's
  sources. See <code>preprocessor_flags</code> for more information.
  {/param}
{/call}
{/template}

/***/
{template .exported_preprocessor_flags_arg}
{call buck.arg}
  {param name : 'exported_preprocessor_flags' /}
  {param default : '[]' /}
  {param desc}
  Just as <code>preprocessor_flags</code>, flags to use when preprocessing any of the above sources
  (which require preprocessing). However, unlike <code>preprocessor_flags</code>, these preprocessor
  flags are also used by rules that transitively depend on this rule when preprocessing their own
  sources.
  {/param}
{/call}
{/template}

/***/
{template .exported_platform_preprocessor_flags_arg}
{call buck.arg}
  {param name : 'exported_platform_preprocessor_flags' /}
  {param default : '[]' /}
  {param desc}
  Platform specific exported preprocessor flags. These should be specified as a list of pairs where
  the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the
  platform name is matched, and the second element is a list of flags to use when preprocessing the
  source files in the target and all targets that transitively depend on it if the platform matches
  the regex. See <code>exported_preprocessor_flags</code> for more information.
  {/param}
{/call}
{/template}

/***/
{template .compiler_flags_arg}
{call buck.arg}
  {param name : 'compiler_flags' /}
  {param default : '[]' /}
  {param desc}
  Flags to use when compiling any of the above sources (which require compilation).
  {/param}
{/call}
{/template}

/***/
{template .platform_compiler_flags_arg}
{call buck.arg}
  {param name : 'platform_compiler_flags' /}
  {param default : '[]' /}
  {param desc}
  Platform specific compiler flags. These should be specified as a list of pairs where the first
  element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform
  name is matched, and the second element is a list of flags to use when compiling the target's
  sources. See <code>compiler_flags</code> for more information.
  {/param}
{/call}
{/template}

/***/
{template .linker_flags_arg}
{call buck.arg}
  {param name : 'linker_flags' /}
  {param default : '[]' /}
  {param desc}
  Flags to use whenever this rule is involved in a link operation (e.g linked into an executable or
  shared library).
  {/param}
{/call}
{/template}

/***/
{template .platform_linker_flags_arg}
{call buck.arg}
  {param name : 'platform_linker_flags' /}
  {param default : '[]' /}
  {param desc}
  Platform specific linker flags. These should be specified as a list of pairs where the first
  element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform
  name is matched, and the second element is a list of flags to use when this target is involved in
  a link operation. See <code>linker_flags</code> for more information.
  {/param}
{/call}
{/template}

/***/
{template .exported_linker_flags_arg}
{call buck.arg}
  {param name : 'exported_linker_flags' /}
  {param default : '[]' /}
  {param desc}
  Linker flags to add to this library and to libraries that depend on this library.
  {/param}
{/call}
{/template}

/***/
{template .exported_platform_linker_flags_arg}
{call buck.arg}
  {param name : 'exported_platform_linker_flags' /}
  {param default : '[]' /}
  {param desc}
  Platform specific linker flags. These should be specified as a list of pairs where the first
  element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform
  name is matched, and the second element is a list of flags to use when the target and all targets
  that transitively depend on it are involved in a link operation if the platform matches the regex.
  See <code>exported_linker_flags</code> for more information.
  {/param}
{/call}
{/template}

/***/
{template .force_static}
{call buck.arg}
  {param name : 'force_static' /}
  {param default: 'False' /}
  {param desc}
  DEPRECATED: <code>See preferred_linkage</code>.

  If <code>true</code>, the library will always be linked statically, even if the target that
  depends on it specifies <code>link_style</code> to be something other than <code>static</code>.
  Note that this may still cause the library to be linked into its own shared library, if it happens
  to be the root of the linkable dependency tree (e.g. if a Python library directly depends on the
  library with <code>force_static=True</code>).
  Also note this will cause duplicate symbols if multiple targets that depend on the library are linked
  together.
  {/param}
{/call}
{/template}

/***/
{template .exported_deps_arg}
{call buck.arg}
  {param name : 'exported_deps' /}
  {param default: '[]' /}
  {param desc}
  Dependencies that will also appear to belong to any rules that depend on this one.  Currently, this
  only affects linking: exported dependencies will also be included in the link line of dependents of
  this rules, but normal dependencies will not.
  {/param}
{/call}
{/template}
