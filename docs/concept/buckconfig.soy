{namespace buck.buckconfig}

/**
 * @param title
 */
{template .section}
  <h2 id="{$title}">[{$title}]</h2>
  <p>
{/template}

/***/
{template .soyweb}
  {call buck.page}
    {param title: '.buckconfig' /}
    {param description}
      An optional file that contains configuration information for Buck.
    {/param}
    {param prettify: true /}
    {param content}
<p>

The root of your project may contain a configuration file
named <code>.buckconfig</code>. If present, Buck will read this file
before executing its business logic so that any customizations specified
in <code>.buckconfig</code> will take effect. This file uses the
{sp}<a href="http://en.wikipedia.org/wiki/INI_file">INI file format</a>
with a few extensions discussed below.

<p>

Although the INI format only recognizes strings as values, Buck allows
fields to be parsed as a list of strings, separated by a separator character.
For example, a field containing command line flags to be passed to a compiler
may parse its value as a list of strings, separated by space, so
that <code>-foo -bar</code> is parsed as a list of two strings, instead of
a single string.

<p>

To ensure that any character can be encoded in a .buckconfig value, Buck
allows values or part of values to be quoted by surrounding them by double
quotes. Inside double quotes, escape sequences can be used to encode
characters that would otherwise be problematic to use in values. The
following escape sequences are supported:

<table summary="Escape sequences in .buckconfig"><tr>
<td>\\</td><td>backslash</td>
</tr><tr>
<td>\"</td><td>double quote</td>
</tr><tr>
<td>\n</td><td>newline</td>
</tr><tr>
<td>\r</td><td>carriage return</td>
</tr><tr>
<td>\t</td><td>tab</td>
</tr><tr>
<td>\x##</td><td>unicode character with code point ## (in hex)</td>
</tr><tr>
<td>\u####</td><td>unicode character with code point #### (in hex)</td>
</tr><tr>
<td>\U########</td><td>unicode character with code point ######## (in hex)</td>
</tr></table>

<p>

In addition, when a field is parsed as a list instead of a string,
the separator character is only interpreted as a separator when it occurs
outside double quotes. For example, if <em>flags</em> is a field being
interpreted as a list of strings separated by
spaces, <code>flags=-foo "-bar \u0429"</code> will result in two
strings: <q>foo</q> and <q>-bar &#1065;</q>.

<h2>.buckconfig.local</h2>

The root of your project may also contain a second configuration file
named <code>.buckconfig.local</code>. Its format is exactly the same as
that of <code>.buckconfig</code>, but any definition in <code>.buckconfig.local</code>{sp}
will override that of <code>.buckconfig</code>. In practice, <code>.buckconfig</code> will be a
version-controlled file that contains settings that are applicable to all team members (such as
standard includes for build files), whereas <code>.buckconfig.local</code> will be excluded from
version control because it contains user-specific overrides (such as personal aliases).

<p>

If a configuration option is not found in the project's <code>.buckconfig</code>, it will fall
back to a <code>.buckconfig</code> file and <code>.buckconfig.d</code> directory in your home
directory. Each of those has the same format as a <code>.buckconfig</code> file but will have
any settings overridden by project-specific configurations. If you have build issues, make sure
that there is nothing in your <code>.buckconfig</code> or <code>.buckconfig.d</code> that could
be conflicting with the project you're trying to build.

<h2>Sections</h2>

The following sections are recognized by Buck:

<p>

{foreach $name in [
    'adb',
    'alias',
    'android',
    'apple',
    'build',
    'buildfile',
    'cache',
    'color',
    'credentials',
    'cxx',
    'd',
    'download',
    'go',
    'groovy',
    'halide',
    'intellij',
    'java',
    'httpserver',
    'log',
    'lua',
    'maven_repositories',
    'ndk',
    'project',
    'python',
    'resources',
    'resources_per_rule',
    'rust',
    'test',
    'thrift',
    'tools',
    'ui',
    'unknown_flavors_messages',
    ]}
  <a href="#{$name}"><code>[{$name}]</code></a><br>
{/foreach}

{call buckconfig.section}
  {param name: 'adb' /}
  {param description}
    This section configures adb behavior.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'adb' /}
  {param name: 'adb_restart_on_failure' /}
  {param example_value: 'true' /}
  {param description}
    This specifies whether to restart adb on failure or not.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'adb' /}
  {param name: 'multi_install_mode' /}
  {param example_value: 'false' /}
  {param description}
    This specifies whether multi-install mode is enabled or disabled by default.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'alias' /}
  {param description}
<p>
  This section contains definitions of {call buck.build_target/} aliases.
</p>

{literal}<pre class="prettyprint lang-ini">
[alias]
  app     = //apps/myapp:app
  apptest = //apps/myapp:test
</pre>{/literal}

<p>
  These aliases can then be used from the command line:
</p>

{literal}<pre class="prettyprint">
$ buck build app
$ buck test apptest
</pre>{/literal}

<p>
  You can also suffix aliases with flavors:
</p>

{literal}<pre class="prettyprint">
$ buck build app#src_jar
# This will expand the alias and effectively build the target returned by:
$ buck targets --resolve-alias app#src_jar
//apps/myapp:app#src_jar
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'android' /}
  {param description}
    This section configures android-specific build behavior.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'android' /}
  {param name: 'build_tools_version' /}
  {param example_value: '23.0.1' /}
  {param description}
    This specifies the version of the Android SDK Build-tools that all Android code in the project
    should be built against.  By default, Buck will select the newest version found on the system.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'android' /}
  {param name: 'target' /}
  {param example_value: 'Google Inc.:Google APIs:21' /}
  {param description}
    This specifies the version of the Android SDK that all Android code in the project should be
    built against.  Even if not specified, the version that Buck chose to use will be printed to the
    console during the build.  A list of valid values on your system can be found by running{sp}
    <code>android list targets --compact</code>.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'apple' /}
  {param description}
    This section includes settings that control settings that are specific to Apple platform rules.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'xcode_developer_dir' /}
  {param example_value: 'path/to/developer/directory' /}
  {param description}
    By default, Buck will use the output of <code>xcode-select --print-path</code> to determine
    where Xcode's developer directory is.  However, you can specify a directory in the config to
    override whatever value that would return.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'xcode_developer_dir_for_tests' /}
  {param example_value: 'path/to/developer/directory/for_tests' /}
  {param description}
    Optionally override the Xcode developer directory for running tests, if you want them to be run
    with a different Xcode version than the version used for building.  If absent, falls back
    to <code>xcode_developer_dir</code> and finally <code>xcode-select --print-path</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'target_sdk_version' /}
  {param description}
    For each platform, you can specify the target SDK version to use.  The format is
    {sp}<code>{lb}platform{rb}_target_sdk_version</code>.
  {/param}
  {param raw_example}
{literal}<pre class = "prettyprint lang-ini">
[apple]
  iphonesimulator_target_sdk_version = 7.0
  iphoneos_target_sdk_version = 7.0
  macosx_target_sdk_version = 10.9
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'xctool_path' /}
  {param example_value: 'path/to/binary/of/xctool' /}
  {param description}
    If you want to run tests with Buck, you will need to get
    {sp}<a href="https://github.com/facebook/xctool"><code>xctool</code></a> and tell Buck where to
    find it.  This setting lets you specify a path to a binary.  You should use either this setting
    or {call buckconfig.apple_xctool_zip_target /}.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'xctool_zip_target' /}
  {param example_value: '//path/to/target/that/creates:xctool-zip' /}
  {param description}
    If you want to run tests with Buck, you will need to get
    {sp}<a href="https://github.com/facebook/xctool"><code>xctool</code></a> and tell Buck where to
    find it.  This setting lets you specify a {call buck.build_target /}.  You should use either
    this setting or {call buckconfig.apple_xctool_path /}.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'test_log' /}
  {param description}
    When running Apple tests via <code>xctool</code>, Buck can set environment variables to
    tell the tests where to write debug logs and what log level to use. By default, Buck
    tells <code>xctool</code> to set two environment variables named <code>FB_LOG_DIRECTORY</code>
    and <code>FB_LOG_LEVEL</code> when running tests which you can read from your test environment:

{literal}<pre class="prettyprint lang-sh">
  FB_LOG_DIRECTORY=buck-out/gen/path/to/logs
  FB_LOG_LEVEL=debug
</pre>{/literal}

    You can override the default names for these environment variables and the value for the debug
    log level via the following config settings:
  {/param}
  {param raw_example}
{literal}<pre class="prettyprint lang-init">
  [apple]
    test_log_directory_environment_variable=MY_LOG_DIRECTORY
    test_log_level_environmant_variable=MY_LOG_LEVEL
    test_log_level=verbose
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'xctool_default_destination_specifier' /}
  {param example_value: 'platform=iOS Simulator' /}
  {param description}
    This setting is passed directly to <code>xctool</code>, and then to <code>xcodebuild</code> as
    the <code>-destination</code> argument.  See the
    {sp}<a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html">
    man page</a> for the proper syntax.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'default_debug_info_format_for_binaries' /}
  {param example_value: 'NONE' /}
  {param description}
    <code>default_debug_info_format_for_binaries</code> setting controls the default debug info format that
    is used when building binary targets. If you don't specify it, <code>DWARF_AND_DSYM</code> value will be used.
    You can disable debug data by specifying <code>NONE</code> value. You can produce unstripped binary by specifying
    <code>DWARF</code> value.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'default_debug_info_format_for_libraries' /}
  {param example_value: 'DWARF' /}
  {param description}
    <code>default_debug_info_format_for_libraries</code> setting controls the default debug info format that
    is used when building dynamic library targets. If you don't specify it, <code>DWARF</code> value will be used.
    You can disable debug data by specifying <code>NONE</code> value. You can produce dSYM file for the library by specifying
    <code>DWARF_AND_DSYM</code> value.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'default_debug_info_format_for_tests' /}
  {param example_value: 'DWARF_AND_DSYM' /}
  {param description}
    <code>default_debug_info_format_for_tests</code> setting controls the default debug info format that
    is used when building test targets. If you don't specify it, <code>DWARF</code> value will be used.
    You can disable debug data by specifying <code>NONE</code> value. You can produce dSYM file by specifying
    <code>DWARF_AND_DSYM</code> value.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'device_helper_path' /}
  {param example_value: 'third-party/iOSConsole/iOSConsole' /}
  {param description}
    If you want to have Buck be able to install to devices, you need to provide the path to the{sp}
    <a href="https://github.com/samdmarshall/SDMMobileDevice"><code>iOSConsole</code></a> binary.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'provisioning_profile_search_path' /}
  {param example_value: 'path/to/provisioning/profiles' /}
  {param description}
    Specifies a path where Buck will look for provisioning profiles (files with extension <code>
    .mobileprovision</code>) that it can use to provision the application to be used on a device.
    You can specify either an absolute path or one relative to the project root.  If unspecified,
    Buck will look in <code>~/Library/MobileDevice/Provisioning Profiles</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: 'use_header_maps_in_xcode' /}
  {param example_value: 'false' /}
  {param description}
    Xcode projects generated by Buck by default use header maps for header search paths. This speeds
    up builds for large projects over using regular directory header search paths, but breaks some
    Xcode features, like header file name autocompletion. If that is an issue, use the following
    option to disable the use of header maps.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: '*_package_command' /}
  {param description}
    Specify a custom command to run for <code>apple_package()</code> rules. The syntax of this field
    is similar to the <code>cmd</code> field of {call buck.genrule /}, and supports some expansions:

    <dl>
        <dt><code>SRCS</code></dt>
        <dd>
            Expands to the absolute path of the <code>bundle</code> argument output to the
            <code>apple_package()</code> rule.
        </dd>
        <dt><code>OUT</code></dt>
        <dd>
            Expands to the output file for the <code>apple_package()</code> rule. The file specified
            by this variable must always be written by this command.
        </dt>
        <dt><code>SDKROOT</code></dt>
        <dd>
            Expands to the SDK root directory for the requested SDK.  For example,
            <code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk/</code>.
        </dd>
    </dl>

    Note that since strings in the config can be quoted, literal quotes can only be written by
    quoting the string and use escaped quotes.

    If omitted, this will revert to the built-in behavior.

    When this option is specified, <code>*_package_extension</code> must also be specified.
  {/param}
  {param raw_example}
      {literal}
      <pre class = "prettyprint lang-ini">
[apple]
  iphoneos_package_command = "\"$PLATFORM_DIR/Developer/usr/bin/PackageApplication\" \"$SRCS\" \"$OUT\""
  iphoneos_package_extension = zip</pre>
      {/literal}
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: '*_package_extension' /}
  {param description}
    Specify the output extension for custom <code>apple_package</code> rules configured with
    <code>*_package_command</code>.

    This config option must be specified when <code>*_package_command</code> is specified, or both
    omitted.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'apple' /}
  {param name: '*_toolchains_override' /}
  {param description}
    Specify a comma-delimited custom list of toolchains to use when building with a particular SDK.

    This is the Buck equivalent of the <code>TOOLCHAINS</code> environment variable
    when building with Xcode.

    If omitted, this will revert to the built-in behavior.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'build' /}
  {param description}
    This section includes settings that control build engine behavior.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'engine' /}
  {param example_value: 'shallow' /}
  {param description}
    This has two possible values that change the behavior of how Buck operates when building a{sp}
    {call buck.build_target /}:
    <ul>
      <li>
        <code>shallow</code> (default): only the required transitive dependencies of a{sp}
        {call buck.build_target /} are materialized locally. Cache hits can result in missing
        transitive dependencies that are not needed for the final output.
      </li>
      <li>
        <code>deep</code>: ensure that all transitive dependencies of a {call buck.build_target /}
        {sp}are materialized locally.
      </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'depfiles' /}
  {param example_value: 'enabled' /}
  {param description}
    Configures the use of dependency files for rules that support them.  This is an optimization
    that is useful when dependencies are over-specified and the rule can dynamically determine the
    subset of dependencies it actually needs.  The possible values are:
    <ul>
      <li>
        <code>enabled</code> (default): Use dependency files to avoid unnecessary rebuilds.
      </li>
      <li>
        <code>cache</code>: Use dependency files to avoid unnecessary rebuilds and to store/fetch
        artifacts to/from the cache.
      </li>
      <li>
        <code>disabled</code>: Do not use dependency files for rebuild detection.
      </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'max_depfile_cache_entries' /}
  {param example_value: '256' /}
  {param description}
    Sets the maximum size of the depfile cache for each input source file.  This is only used when
    setting {call buckconfig.build_depfiles /} to <code>cache</code>.  An ideal setting for this
    should be big enough for the working set of all possible header states that a given unchanged
    source file uses.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'threads' /}
  {param example_value: '4' /}
  {param description}
    Sets the maximum number of threads to use for building.  By default, Buck uses the number of
    available cores multipled by <code>1.25</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'thread_core_ratio' /}
  {param example_value: '0.75' /}
  {param description}
    Sets the maximum number of threads to use for building as a ratio of the number of available
    cores (e.g. <code>0.75</code> on a 4 core machine would limit building
    to 3 threads, or a value of <code>1.25</code> on the same machine would attempt to use 5
    threads).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'thread_core_ratio_max_threads' /}
  {param example_value: '10' /}
  {param description}
    The maximum number of threads to use when calculating the number of build threads from
    thread_core_ratio. (e.g. a value of 2 on a 4 core machine would ensure that, at most, 2 threads
    were used, and value of 10 on a 40 core machine would ensure that, at most, 10 threads were used).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'thread_core_ratio_min_threads' /}
  {param example_value: '1' /}
  {param description}
    The minimum number of threads to use when calculating the number of build threads from
    thread_core_ratio. (e.g. a value of 1 on a 4 core machine would ensure that, at least, 1 thread
    was used, and value of 4 on a 40 core machine would ensure that, at least, 10 threads were used).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'thread_core_ratio_reserved_cores' /}
  {param example_value: '1' /}
  {param description}
    Limit the maximum number of build threads to be the number of detected cores minus this value.
    (e.g. a value of 1 on a 4 core machine would ensure that, at most, 3 cores were used, and a
    value of 2 on a 40 core machine would ensure that, at most, 38 cores were used).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'build' /}
  {param name: 'network_threads' /}
  {param example_value: '8' /}
  {param description}
    The number of threads to be used for network I/O. The default value is number of cores of the
    machine.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'buildfile' /}
  {param description}
    This section includes settings that control build file behavior.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'buildfile' /}
  {param name: 'includes' /}
  {param example_value: '//core/DEFS' /}
  {param description}
    This sets a list of paths to files that will be automatically included by every build file.
    This is equivalent to calling {call buck.fn_include_defs /} in every build file.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'cache' /}
  {param description}
    This section configures build artifact caching, which can be disabled (default), on the
    filesystem, or in a distributed cache that can be shared among developers.  Note that the{sp}
    {call buckconfig.cache_mode /} setting determines which other properties, if any, are relevant
    to the caching configuration; the irrelevant properties are ignored.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'mode' /}
  {param example_value: 'dir, http' /}
  {param description}
    A comma-separated set of caching policies to use.  The valid values are:
    <ul>
      <li>
        <code>dir</code> (default): Use a directory-based cache on the local filesystem.
      </li>
      <li>
        <code>http</code>: Use an http-based cache.
      </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'dir' /}
  {param example_value: 'buck-cache' /}
  {param description}
    The directory path relative to the project root that is used for directory-based caching (
    {call buckconfig.cache_mode /} must contain <code>dir</code>).  This defaults to{sp}
    <code>buck-out/cache</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'dir_max_size' /}
  {param example_value: '10GB' /}
  {param description}
    The maximum cache size for directory-based caching ({call buckconfig.cache_mode /} must contain
    {sp}<code>dir</code>).  The default size is unlimited.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'dir_mode' /}
  {param example_value: 'readwrite' /}
  {param description}
    Dictates if the cache is <code>readonly</code> or <code>readwrite</code> (default) when using
    directory-based caching ({call buckconfig.cache_mode /} must contain <code>dir</code>).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_url' /}
  {param example_value: 'http://localhost:8080' /}
  {param description}
    The URL to use to contact the cache when using http-based caching{sp}
    ({call buckconfig.cache_mode /} must contain <code>http</code>).  Buck communicates with the
    server using a <a href="{ROOT}concept/http_cache_api.html">simple API</a>.

  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_mode' /}
  {param example_value: 'readwrite' /}
  {param description}
    Dictates if the cache is <code>readonly</code> or <code>readwrite</code> (default) when using
    http-based caching ({call buckconfig.cache_mode /} must contain <code>http</code>).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_read_headers' /}
  {param example_value: 'User-Agent: buck' /}
  {param description}
    A semicolon-separated set of HTTP headers to use when reading from the cache when using
    http-based caching ({call buckconfig.cache_mode /} must contain <code>http</code>).  The default
    is no headers.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_write_headers' /}
  {param example_value: 'Authorization: XXXXXXX; User-Agent: buck' /}
  {param description}
    A semicolon-separated set of HTTP headers to use when writing to the cache when using http-based
    caching ({call buckconfig.cache_mode /} must contain <code>http</code>).  The default is no
    headers.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_timeout_seconds' /}
  {param example_value: '3' /}
  {param description}
    Dictates the timeout per connection when using http-based caching{sp}
    ({call buckconfig.cache_mode /} must contain <code>http</code>).  The default is <code>3</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_max_concurrent_writes' /}
  {param example_value: '1' /}
  {param description}
    The numver of writer threads to use to upload to the http cache when using http-based caching
    {sp}({call buckconfig.cache_mode /} must contain <code>http</code>).  The default is{sp}
    <code>1</code>.  Note that when using multiple http caches (see below), the writer thread pool
    is shared between them all.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_writer_shutdown_timeout_seconds' /}
  {param example_value: '1800' /}
  {param description}
    The length of time to wait after the build completes for any remaining http cache uploads to
    complete before forecfully shutting down the writer thread pool when using http-based caching
    {sp}({call buckconfig.cache_mode /} must contain <code>http</code>).  The default is{sp}
    <code>1800</code> (30 minutes).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_error_message_format' /}
  {param example_value}
    {literal}The cache named {cache_name} encountered an error: {error_message}{/literal}
  {/param}
  {param description}
    This setting allows for the customization of how http cache errors appear to the user.  If the
    text <code>{lb}cache_name{rb}</code> is present, it will be replaced with the name of the cache
    when using {call buckconfig.cache_http_cache_names /}, or just <code>http</code>.  If the text
    {sp}<code>{lb}error_message{rb}</code>, it will be replaced with the error message.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_max_store_size' /}
  {param example_value: '5000000' /}
  {param description}
    The max size in bytes that an artifact can be to get pushed to an http cache.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'serve_local_cache' /}
  {param example_value: 'false' /}
  {param description}
    Make the directory-based cache ({call buckconfig.cache_mode /} must contain <code>dir</code>)
    available to other hosts on the network via Buck's HTTP server (enabled under{sp}
    {call buckconfig.httpserver /}).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'served_local_cache_mode' /}
  {param example_value: 'readwrite' /}
  {param description}
    Dictates if the cache is <code>readonly</code> (default) or <code>readwrite</code> when{sp}
    {call buckconfig.cache_serve_local_cache /} is enabled.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'http_cache_names' /}
  {param description}
    A comma-separated list of names used to configure multiple caches.  The caches will be used{sp}
    <b>serially</b> in the order in which their names are specified here.  If an artifact is found
    further along in the list, an attempt to store it in the caches earlier in the list will be
    made.  In the following example, if the artifact is found in the <code>global</code> cache, it
    will be stored in the <code>local</code> cache, but not <code>regional-ro</code> cache (as that
    one is <code>readonly</code>.
  {/param}
  {param raw_example}
{literal}<pre class="prettyprint lang-ini">
[cache]
    mode = http
    http_cache_names = local, regional-ro, global

[cache#regional-ro]
    http_url = http://region.com/
    http_timeout_seconds = 5
    http_mode = readonly

[cache#local]
    http_url = http://local.co.uk/
    http_timeout_seconds = 1

[cache#global]
    http_url = http://global.com/
    http_timeout_seconds = 42
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'two_level_cache_enabled' /}
  {param example_value: 'false' /}
  {param description}
    Have the Buck client perform 2-level stores and lookups on the artifacts.
    Every cache operation consists of 2 steps: content hash-based and
    RuleKey-based. This makes it easier to reuse locally cached artifacts
    across different buck versions at the expense of higher latencies in the
    case where artifacts are not present in the local cache.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'two_level_cache_minimum_size' /}
  {param example_value: '1024' /}
  {param description}
    When performing a store artifacts smaller than this size will be stored
    directly, without the content hash redirection.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'two_level_cache_maximum_size' /}
  {param example_value: '1024' /}
  {param description}
    When performing a store artifacts bigger than this size will be stored
    directly, without the content hash redirection.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cache' /}
  {param name: 'action_graph_cache_check_enabled' /}
  {param example_value: 'false' /}
  {param description}
    It enables an integrity checking mechanism in the action graph cache that compares the a newly
    generated action graph with the one already in the cache in the case of a cache hit. If the
    graphs do not match the build is stopped and the mismatching rules are printed and logged.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'credentials' /}
  {param description}
    This section configures credentials to be used when fetching from
    authenticated Maven repositories via HTTPS.
    <p>
    For a repository <code>repo</code> appearing in{sp}
    {call buckconfig.maven_repositories /}, Buck reads the values of
    {sp}<code>repo_user</code> and <code>repo_pass</code> in this section
    (if present), and passes them to the server using {sp}
    <a href="https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side">basic access authentication</a>
    {sp}when fetching.
    <p>
    Note that authenticating in this way over plain HTTP connections is
    disallowed and will result in an error.

{literal}<pre class="prettyprint lang-ini">
[maven_repositories]
  repo = https://example.com/repo
[credentials]
  repo_user = joeuser
  repo_pass = hunter2
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'color' /}
  {param description}
    This section configures colored output of Buck.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'color' /}
  {param name: 'ui' /}
  {param example_value: 'true' /}
  {param description}
    Enables (default) or disables colorized output in the terminal.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'd' /}
  {param description}
    This section configures how code written in D is compiled.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'd' /}
  {param name: 'base_compiler_flags' /}
  {param example_value: '-I/some/path -g -O3' /}
  {param description}
    Flags to pass to every invocation of the D compiler.
    This is a space-separated list.
    It defaults to an empty list.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'd' /}
  {param name: 'compiler' /}
  {param example_value: '/opt/dmd/bin/dmd' /}
  {param description}
    Path to the D compiler.
    If this parameter is not specified, Buck attempts to find the D
    compiler automatically.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'd' /}
  {param name: 'library_path' /}
  {param example_value: '/usr/local/lib:/opt/dmd/lib' /}
  {param description}
    Directories to be searched for the D runtime libraries.
    This is a colon-separated list.
    If this parameter is not specified, Buck attempts to detect the
    location of the libraries automatically.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'd' /}
  {param name: 'linker_flags' /}
  {param example_value: '"-L/path to phobos" -lphobos2' /}
  {param description}
    Flags to pass to the linker when linking D code into an executable.
    This is a space-separated list.
    If omitted, this value is constructed from d.library_path.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'download' /}
  {param description}
    This section configures downloading from the network during {call buck.cmd_fetch /}.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'download' /}
  {param name: 'proxy' /}
  {param description}
    Buck will attempt to fetch files from the network, however, if you happen to be behind a]
    firewall, this may not work correctly.  You can supply a proxy when downloading from HTTP[S]
    servers with these three settings.  Valid types for <code>proxy_type</code> are{sp}
    <code>HTTP</code> (default) and <code>SOCKS</code>.  These values correspond to {sp}
    <a href="http://docs.oracle.com/javase/8/docs/api/java/net/Proxy.Type.html">Java's
    Proxy.Type</a>.
  {/param}
  {param raw_example}
{literal}<pre class="prettyprint lang-ini">
[download]
    proxy_host=proxy.example.com
    proxy_port=8080
    proxy_type=HTTP
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'download' /}
  {param name: 'maven_repo' /}
  {param example_value: 'https://repo1.maven.org/maven2' /}
  {param description}
    If a remote file's URL starts with <code>mvn:</code>, that file (usually a jar) is supposed to
    come from a maven repo.  You can specify the repo to download from here, or by setting one or
    more repositories in {call buckconfig.maven_repositories /}.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'cxx' /}
  {param description}
    <p>
      This section configures the paths to the C++ and C toolchains' binaries and the default flags
      to pass to all invocations of them.
    </p>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cpp' /}
  {param example_value: '/usr/bin/gcc' /}
  {param description}
    The path to the C preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cc' /}
  {param example_value: '/usr/bin/gcc' /}
  {param description}
    The path to the C compiler.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'ld' /}
  {param example_value: '/usr/bin/g++' /}
  {param description}
    The path to the C/C++ linker driver.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'linker_platform' /}
  {param example_value: 'MACOS' /}
  {param description}
    The platform for the linker.  Normally this is autodetected based on the system, but it useful
    to set when cross compiling.  Valid values are:
    <ul>
      <li><code>MACOS</code></li>
      <li><code>LINUX</code></li>
      <li><code>WINDOWS</code></li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cxxpp' /}
  {param example_value: '/usr/bin/g++' /}
  {param description}
    The path to the C++ preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cxx' /}
  {param example_value: '/usr/bin/g++' /}
  {param description}
    The path to the C++ compiler.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'aspp' /}
  {param example_value: '/usr/bin/gcc' /}
  {param description}
    The path to the assembly preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'as' /}
  {param example_value: '/usr/bin/as' /}
  {param description}
    The path to the assembler.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'ar' /}
  {param example_value: '/usr/bin/ar' /}
  {param description}
    The path to the archiver.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'archiver_platform' /}
  {param example_value: 'MACOS' /}
  {param description}
    The platform for the archiver.  Normally this is autodetected based on the system, but it useful
    to set when cross compiling.  Valid values are:
    <ul>
      <li><code>MACOS</code></li>
      <li><code>LINUX</code></li>
      <li><code>WINDOWS</code></li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cppflags' /}
  {param example_value: '-Wall' /}
  {param description}
    The flags to pass to the C preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cflags' /}
  {param example_value: '-Wall' /}
  {param description}
    The flags to pass to the C compiler and preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'ldflags' /}
  {param example_value: '--strip-all' /}
  {param description}
    The flags to pass to the linker.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cxxppflags' /}
  {param example_value: '-Wall' /}
  {param description}
    The flags to pass to the C++ preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cxxflags' /}
  {param example_value: '-Wall' /}
  {param description}
    The flags to pass to the C++ compiler and preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'asppflags' /}
  {param example_value: '-W' /}
  {param description}
    The flags to pass to the assembly preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'asflags' /}
  {param example_value: '-W' /}
  {param description}
    The flags to pass to the assembler and assembly preprocessor.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'arflags' /}
  {param example_value: '-X32_64' /}
  {param description}
    The flags to pass to the archiver.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'ranlibflags' /}
  {param example_value: '--plugin someplugin' /}
  {param description}
    The flags to pass to the archive indexer.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'untracked_headers' /}
  {param example_value: 'error' /}
  {param description}
    How to handle header files that get included in a preprocessing step, but which aren't explicitly owned by
    any dependencies.  By default, Buck sandboxes headers into symlink trees, but file relative inclusion and
    explicit preprocessor flags can still cause untracked headers to get pulled into the build which can break
    caching.
    <ul>
      <li>
        <code>ignore</code> (default): Untracked headers are allowed in the build.
      </li>
      <li>
        <code>warn</code>: Print a warning to the console when an untracked header is used.
      </li>
      <li>
        <code>error</code>: Fail the build when an untracked header is used.
      </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'untracked_headers_whitelist' /}
  {param example_value: '/usr/include/.*, /usr/local/include/.*' /}
  {param description}
    A list of regexes which match headers to exempt from untracked header verification.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'link_weight' /}
  {param example_value: '3' /}
  {param description}
    The number of jobs that each C/C++ link rule consumes when running.
    By default, this is <code>1</code>, but this can overriden to change
    how many link rules can execute in parallel for a given <code>-j</code>
    value.
    This is useful for builds with large I/O intensive static links where using
    a lower <code>-j</code> value is undesirable (since it reduces the parallelism
    for other build rule types).
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'cxx' /}
  {param name: 'cache_links' /}
  {param example_value: 'false' /}
  {param description}
    C/C++ link rules are cached by default.  However, static C/C++ link jobs
    can take up lots of cache space and also get relatively low hit rates, so
    this config option provides a way to disable caching of all C/C++ link rules
    in the build.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'go' /}
  {param description}
    This section defines the Go toolchain.  By default Buck will try to discovery the Go compiler
    and linker from the <code>go</code> tool found in your <code>PATH</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'root' /}
  {param example_value: '/opt/golang/libexec' /}
  {param description}
    If you have a non-standard Go install, you will need to set the Go root.  The root should
    contain <code>pkg</code> and <code>bin</code> directories.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'prefix' /}
  {param example_value: 'github.com/facebook/buck' /}
  {param description}
    For interoperability with the go tool, you may specify a prefix for your default package names.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'tool' /}
  {param example_value: '/usr/local/bin/go' /}
  {param description}
    You can specify the path to find the <code>go</code> tool.  This in turn will allow Buck to
    discover the compiler/linker by default.  This defaults to <code>${lb}go.root{rb}/bin/go</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'compiler' /}
  {param example_value: '/usr/local/libexec/go/pkg/tool/darwin_amd64/compile' /}
  {param description}
    The full path to the Go compiler.  This is normally automatically discovered.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'assembler' /}
  {param example_value: '/usr/local/libexec/go/pkg/tool/darwin_amd64/asm' /}
  {param description}
    The full path to the Go assembler.  This is normally automatically discovered.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'packer' /}
  {param example_value: '/usr/local/libexec/go/pkg/tool/darwin_amd64/pack' /}
  {param description}
    The full path to the Go packer.  This is normally automatically discovered.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'linker' /}
  {param example_value: '/usr/local/libexec/go/pkg/tool/darwin_amd64/link' /}
  {param description}
    The full path to the Go linker.  This is normally automatically discovered.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'go' /}
  {param name: 'vendor_path' /}
  {param example_value: 'third-party/go' /}
  {param description}
    A list of colon (:) separated list of directories to include for including in the importmap for
    Go dependencies.  Packages in these directories are allowed to be imported given just the
    relative path to the package.  This is similar to how 'vendor' directories work.

    e.g you can use <code>import golang.org/x/net</code> for a package that lives in
    <code><vendor_path>/golang.org/x/net</code>.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'groovy' /}
  {param description}
    This section configures the <a href="http://groovy-lang.org/">Groovy</a> toolchain.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'groovy' /}
  {param name: 'groovy_home' /}
  {param example_value: '/path/to/groovy_home'/}
  {param description}
    This defines the value of <code>GROOVY_HOME</code> that Buck should use. If it is not provided,
    Buck will use the system's <code>GROOVY_HOME</code> by default.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'halide' /}
  {param description}
    This section configures the <a href="http://halide-lang.org/">Halide</a> platform mappings and
    toolchain.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'halide' /}
  {param name: 'target' /}
  {param description}
    This defines the C++ platform flavor to Halide target mapping.  Each key should begin with the
    prefix <code>target_</code>, followed by the flavor name.  The corresponding value should be the
    Halide target string to use when building for that flavor.
  {/param}
  {param raw_example}
{literal}<pre class="prettyprint lang-ini">
[halide]
  target_iphonesimulator-x86_64 = x86-64-osx
  target_iphoneos-arm64         = arm-64-ios
</pre>{/literal}
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'halide' /}
  {param name: 'xcode_compile_script' /}
  {param example_value: '//path/to/script.sh' /}
  {param description}
    The optional path to a shell script which should be used for invoking the Halide AOT "compiler"
    when building projects that include Halide targets in Xcode.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'intellij' /}
  {param description}
    This section configures a project generated for IntelliJ IDEA by `buck project` command.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'intellij' /}
  {param name: 'java_library_sdk_names' /}
  {param example_value: '1.6 => Java SDK 1.6, 1.8 => Java SDK 1.8' /}
  {param description}
    SDK names which should be used in IntelliJ modules generated
    from <code>java_library</code> rules with non-default <code>source</code> option.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'intellij' /}
  {param name: 'jdk_name' /}
  {param example_value: 'Java SDK 1.6' /}
  {param description}
    IntelliJ project SDK name.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'intellij' /}
  {param name: 'jdk_type' /}
  {param example_value: 'Android SDK or JavaSDK' /}
  {param description}
    IntelliJ project SDK type.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'intellij' /}
  {param name: 'language_level' /}
  {param example_value: 'JDK_1_7' /}
  {param description}
    Default Java language level for the IntelliJ project.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'java' /}
  {param description}
    This section configures the Java toolchain.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'src_roots' /}
  {param example_value: 'src, /java/, /javatests/' /}
  {param description}
    The paths to roots of Java code (where a root contains a tree of Java folders where the folder
    structure mirrors the package structure).  This list of paths is comma-delimited.  Paths that
    start with a slash are relative to the root of the project, and all other paths can match a
    folder anywhere in the tree.  In the example below, we match all folders named <code>src</code>,
    and <code>java</code> and <code>javatests</code> at the root of the project.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'extra_arguments' /}
  {param example_value: '-g' /}
  {param description}
    A comma-delimited list of flags to pass the Java compiler.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'source_level' /}
  {param example_value: '7' /}
  {param description}
    The default version of Java for source files.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'target_level' /}
  {param example_value: '7' /}
  {param description}
    The default version of Java for generated code.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'skip_checking_missing_deps' /}
  {param example_value: 'false' /}
  {param description}
    Buck will attempt to analyze build failures and suggest dependencies that might not be declared
    in order to fix the failure.  On large projects, this can be slow.  This setting disables the
    check.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'jar_spool_mode' /}
  {param example_value: 'intermediate_to_disk' /}
  {param description}
    Specifies how the compiler output to the <code>.jar</code> file should be spooled.  The valid
    modes are:
    <ul>
      <li>
        <code>intermediate_to_disk</code> (default): writes the intermediate <code>.class</code>{sp}
        files from the compiler output to disk.  They are then packed into a <code>.jar</code>.
      </li>
      <li>
        <code>direct_to_jar</code>: compiler output will be directly written to a <code>.jar</code>
        {sp}file with the intermediate <code>.class</code> files held in memory.  The compiler
        output will still be written to disk if there are any postprocessing commands specified
        during the build.
      </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'java' /}
  {param name: 'dx_threads' /}
  {param example_value: '8' /}
  {param description}
    The number of thread that will run the dexing steps. Since the dexing steps can use a lot of
    memory, it might be useful to set this to a lower value to avoid out-of-memory errors.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'httpserver' /}
  {param description}
    Option to enable an experimental web server that presents a UI to explore build data.  Note that
    Buck must be run as a daemon in order for the web server to be available.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'httpserver' /}
  {param name: 'port' /}
  {param example_value: '8080' /}
  {param description}
    This sets the port to use for the web server.  There are three possible values:
    <ul>
      <li>
        <code>n > 0</code>: For any positive integer, Buck will attempt to make the server
        available on that port.
      </li>
      <li>
        <code>0</code>: Buck will find a free port for the server to use and print it out on the
        command line.
      </li>
      <li>
        <code>-1</code>: Explicitely disables the server.
      </li>
    </ul>
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'log' /}
  {param description}
    This section controls how Buck will log information about builds for later inspection.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'log' /}
  {param name: 'max_traces' /}
  {param example_value: '25' /}
  {param description}
    Sets the maximum number of <a href="{ROOT}about/performance_tuning.html">Chrome Traces</a> that
    Buck will create.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'log' /}
  {param name: 'compress_traces' /}
  {param example_value: 'true' /}
  {param description}
    <code>true</code> if Buck should GZIP the traces, false otherwise.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'lua' /}
  {param description}
    This section defines settings relevant to <code>lua_*</code> rules.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'lua' /}
  {param name: 'lua' /}
  {param example_value: '/usr/bin/lua' /}
  {param description}
    The path to the Lua interpreter.  By default, Buck will search for the binary{sp}
    <code>lua</code> in your <code>PATH</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'lua' /}
  {param name: 'cxx_library' /}
  {param example_value: '//third-party/lua:lua' /}
  {param description}
    The build target of the Lua C library to use to link a standalone interpreter.
    By default, Buck will use <code>-llua</code> from the C/C++ linker's default
    library search path.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'lua' /}
  {param name: 'starter_type' /}
  {param example_value: 'pure' /}
  {param description}
    The method for bootstrapping Lua binaries.  By default, <code>native</code> is chosen
    if the binary contains native libraries and <code>pure</code> is chosen otherwise.
    <ul>
        <li>
          <code>pure</code>: The binary bootstrap process uses pure Lua code.  This method
          cannot be used if the binary includes native code.
        </li>
        <li>
          <code>native</code>: The binary bootstrap process links in the Lua C library
          (specified in {call buckconfig.lua_cxx_library /}) to form a standalone native
          interpreter.
        </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'lua' /}
  {param name: 'native_starter_library' /}
  {param example_value: '//third-party/lua:starter' /}
  {param description}
    A C/C++ library to use as a custom starter for Lua binaries which use the
    <code>NATIVE</code> bootstrap method.  The library is expected to define the
    following function:

{literal}<pre class="prettyprint lang-cpp">
#ifdef __cplusplus
extern "C"
#endif
int run_starter(
    int argc,
    const char **argv,
    const char *main_module,
    const char *modules_dir,
    const char *extension_suffix);
</pre>{/literal}

    Where the arguments are as follows:
    <ul>
        <li>
          <code>argc</code>: The number of command-line arguments.
        </li>
        <li>
          <code>argv</code>: The array of command-line arguments.
        </li>
        <li>
          <code>main_module</code>: The name of the binary's main module.
        </li>
        <li>
          <code>modules_dir</code>: The path, relative the binary, to the modules directory.
        </li>
        <li>
          <code>extension_suffix</code>: The suffix used for native libraries (e.g. <code>.so</code>).
        </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'lua' /}
  {param name: 'extension' /}
  {param example_value: '.lex' /}
  {param description}
    The extension to use for Lua binaries.  Defaults to <code>.lex</code>.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'maven_repositories' /}
  {param description}
    This section defines the set of maven repositories that Buck can use when attempting to resolve
    maven artifacts.  It takes the form of key value pairs of a short name for the repo and the URL.
    The URL may either be an HTTP(S) URL, or point to a directory on your local disk.

{literal}<pre class="prettyprint lang-ini">
[maven_repositories]
  central = https://repo1.maven.org/maven2
  m2 = ~/.m2/repository
</pre>{/literal}
  {/param}
{/call}

<p>
Note that if you using Buck to talk to Maven and you are using IPv6, you
might need to <a href="./buckjavaargs.html">add the following option to
your <code>.buckjavaargs</code> file</a>:
</p>

{literal}<pre>
-Djava.net.preferIPv6Addresses=true</pre>{/literal}

{call buckconfig.section}
  {param name: 'ndk' /}
  {param description}
    This section defines properties to configure building native code against the Android NDK.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'ndk' /}
  {param name: 'ndk_version' /}
  {param example_value: 'r10c' /}
  {param description}
    The version of the NDK that Buck should use to build native code.  This is searched for in the
    subfolders defined by the folder found in the <code>ANDROID_NDK_REPOSITORY</code> environment
    variable.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'ndk' /}
  {param name: 'app_platform' /}
  {param example_value: 'android-21' /}
  {param description}
    The android platform libraries that the code is targetting.  This is equivalent to the{sp}
    <code>APP_TARGET</code> in the NDK build system.  The default is <code>android-9</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'ndk' /}
  {param name: 'cpu_abis' /}
  {param example_value: 'armv7, x86' /}
  {param description}
    A comma separated list of the CPU ABIs that this repo supports.  Buck will only build NDK code
    for these ABIs.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'ndk' /}
  {param name: 'compiler' /}
  {param example_value: 'gcc' /}
  {param description}
    When compiling {call buck.cxx_library /} rules, this specifies the compiler family to use from
    the NDK.  The possible values are:
    <ul>
        <li><code>gcc</code> (default): Use the GCC family of compilation tools.</li>
        <li><code>clang</code>: Use the Clang family of compilation tools.</li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'ndk' /}
  {param name: 'gcc_version' /}
  {param example_value: '4.8' /}
  {param description}
    When compiling {call buck.cxx_library /} rules, this specifies the version of GCC to use.  This
    will be used regardless of the value in {call buckconfig.ndk_compiler /}, as other compiler
    families still use tools from the GCC toolchain (such as <code>ar</code>).  The default value is
    {sp}<code>4.8</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'ndk' /}
  {param name: 'clang_version' /}
  {param example_value: '3.4' /}
  {param description}
    When compiling {call buck.cxx_library /} rules, this specifies the version of Clang to use.  The
    default value is <code>3.4</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'ndk' /}
  {param name: 'cxx_runtime' /}
  {param example_value: 'gnustl' /}
  {param description}
    When compiling {call buck.cxx_library /} rules, this specifies the variant of the <a
    href="http://www.kandroid.org/ndk/docs/CPLUSPLUS-SUPPORT.html">C/C++ runtime</a> to use.
    Possible values are:
    <ul>
      <li><code>gabixx</code></li>
      <li><code>gnustl</code> (default)</li>
      <li><code>libcxx</code></li>
      <li><code>stlport</code></li>
      <li><code>system</code></li>
    </ul>
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'project' /}
  {param description}
    This section defines project-level settings.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'ide' /}
  {param example_value: 'xcode' /}
  {param description}
    Buck attempts to figure out the correct IDE to use based on the type of rule (e.g. for{sp}
    {call buck.apple_library /} it will generate Xcode workspace), but for cross-platform libraries
    (like {call buck.cxx_library /}) it is not possible.  This setting lets you specify the default
    IDE that {call buck.cmd_project /} generates.  Possible values are:
    <ul>
      <li><code>intellij</code></li>
      <li><code>xcode</code></li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'default_android_manifest' /}
  {param example_value: '//shared/AndroidManifest.xml' /}
  {param description}
    The default manifest file that should be used when the <code>src_target</code> of a{sp}
    {call buck.project_config /} rule is an Android rule (like {call buck.android_library /}), but
    there is no <code>AndroidManifest.xml</code> file in the same directory as the{sp}
    {call buck.build_file /} the {call buck.project_config /} is defined in.  IDEs for Android
    projects need a manifest file, and this setting provides a convenient fallback without having
    boilerplate manifest files all over your project.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'glob_handler' /}
  {param example_value: 'python' /}
  {param description}
    The {call buck.fn_glob /} handler that Buck will use.  The possible values are:
    <ul>
      <li>
        <code>python</code> (default): evaluates globs in the Python interpreter while parsing{sp}
        {call buck.build_file /}s.
      </li>
      <li>
        <code>watchman</code>: evaluates the globs with <a
        href="https://facebook.github.io/watchman/">Watchman</a>, which is generally much faster.
      </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'allow_symlinks' /}
  {param example_value: 'forbid' /}
  {param description}
    <p>
    If set to <code>forbid</code>, Buck will disallow symbolic links to source and <code>BUCK</code> files.
    This allows Buck to enable a number of performance improvements.  If set to <code>allow</code>, Buck
    will silently ignore symlinks.
    </p>
    <p>
    The default value is <code>allow</code>.
    </p>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'build_file_search_method' /}
  {param example_value: 'watchman' /}
  {param description}
    <p>
    If set to <code>watchman</code>, Buck will try to use Watchman (if available) instead of Java filesystem
    crawls to improve the speed when searching for <code>BUCK</code> files. (This is used for commands
    like <code>buck project</code> and <code>buck build {literal}//path/to/...{/literal}</code>.)
    </p>
    <p>
    If set to <code>filesystem_crawl</code>, Buck will never try to use Watchman, and will always use
    Java filesystem crawls (which are much slower than Watchman.
    </p>
    <p>
    If unset, Buck will try to use Watchman if <code>allow_symlinks</code> is set to <code>forbid</code>.
    </p>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'watchman_query_timeout_ms' /}
  {param example_value: '1000' /}
  {param description}
    When communicating with <a href="https://facebook.github.io/watchman/">Watchman</a>, Buck will
    wait this long for a response.  The defaut is <code>1000</code> ms.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'initial_targets' /}
  {param example_value: '//java/com/facebook/schema:generate_thrift_jar' /}
  {param description}
    A space-separated list of {call buck.build_target /}s to run when {call buck.cmd_project /} is
    executed.  This is often a list of {call buck.genrule /}s whose outputs need to exist in order
    for an IDE to be ale to build a project without the help of Buck.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'ignore' /}
  {param example_value: '.git' /}
  {param description}
    A comma-separated list of subtrees within the project root which are ignored in the following
    contexts:
    <ul>
      <li>Buck daemon filesystem monitoring.</li>
      <li>Filesystem traversal when searching for tests and BUCK files</li>
      <li>IntelliJ project indexing</li>
    </ul>
    Buck automatically excludes its own output, e.g. <code>buck-out</code>, <code>.buckd</code>, and
    {sp}<code>.idea</code>, as well as the cache directory (see {call buckconfig.cache_mode /}), but
     it makes no assumptions about source control systems.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'temp_files' /}
  {param example_value}{literal}^#.*#$, .*~$, .*\.swp${/literal}{/param}
  {param description}
    A comma-separated list of <code>java.util.regex.Pattern</code> regular expressions which match
    temporary and backup files which should be ignored by Buck daemon filesystem monitoring.
    Setting this property to match any temporary files created by your IDE or editor will avoid
    unnecessary cache invalidation when using the Buck daemon.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'post_process' /}
  {param example_value: '//scripts/post_process_buck_project.py' /}
  {param description}
    A script that should be executed after the project files are generated.  Because{sp}
    {call buck.cmd_project /} is currently based on heuristics, the IntelliJ project that it
    generates may not be exactly what you want if you are using a non-tradional project structure.
    In these cases, this script can cleanup the generated project files to better work with your
    project layout.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'parallel_parsing' /}
  {param example_value: 'false' /}
  {param description}
    When set to <code>true</code>, Buck will parse your {call buck.build_file /}s in parallel.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'parsing_threads' /}
  {param example_value: '2' /}
  {param description}
    When {call buckconfig.project_parallel_parsing /} is enabled, this specifies the number of
    threads Buck uses to parse.  By default, this is equal to the number of threads Buck uses to
    build, and will be the minimum of this setting and {call buckconfig.build_threads /}.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'enable_build_file_sandboxing' /}
  {param example_value: 'true' /}
  {param description}
    When set to <code>true</code> (the default is <code>false</code>), Buck will put restrictions
    on importing arbitrary Python modules in {call buck.build_file /}s to make it harder to
    accidentally violate assumptions about determinism of BUCK files and build rules. It will be
    possible to import only whitelisted or sanitized modules, unrestricted import
    behavior can be restored in a context by using
    <a href="{ROOT}function/allow_unsafe_import.html"> <code>allow_unsafe_import()</code> </a>
    function.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'project' /}
  {param name: 'build_file_import_whitelist' /}
  {param example_value: 'math, Foo' /}
  {param description}
    A comma-separated list that configures which Python modules will be added to the build file
    import whitelist in this project when
    <a href="{ROOT}concept/buckconfig.html#project.enable_build_file_sandboxing"> build file sandboxing </a>
    is enabled.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'python' /}
  {param description}
    <p>
      This section may define settings relevant to <code>python_*</code> rules.
    </p>

    <p>
      Adding a section with the header [python#<i>flavor</i>] to the .buckconfig will add
      an alternate python section.  This python section will be used instead of{sp}
      <code>[python]</code> if the compilation flavor is invoked by appending <i>#version</i> to a
      {sp}{call buck.build_target /}.  This can be useful if you have Python 2 and Python 3 code in
      your project and need to differentiate accorindgly (namely by changing the value of{sp}
      {call buckconfig.python_interpreter /}.  On the command line, to build with{sp}
      <code>[python#py3]</code> rather than <code>[python]</code>:
    </p>

    {literal}<pre class="prettyprint">
    $ buck build app#py3
    </pre>{/literal}
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'python' /}
  {param name: 'interpreter' /}
  {param example_value: '/usr/bin/python' /}
  {param description}
    The path to the python interpreter to use.  By default, Buck will search for this in your{sp}
    <code>PATH</code>.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'python' /}
  {param name: 'library' /}
  {param example_value: '//third-party/python:python' /}
  {param description}
    The {call buck.build_rule /}, typically a {call buck.prebuilt_cxx_library /}, wrapping the{sp}
    <code>libpython.so</code> that <code>cpp_python_extension</code> rules should build against.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'python' /}
  {param name: 'path_to_pex_executor' /}
  {param example_value: '/bin/sh' /}
  {param description}
    The path to the tool used to run executable Python packages.  For self-executing packages, this
    should just by the shell.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'python' /}
  {param name: 'pex_extension' /}
  {param example_value: '.pex' /}
  {param description}
    The extension to use for executable Python packages.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'python' /}
  {param name: 'package_style' /}
  {param example_value: 'standalone' /}
  {param description}
    The packaging style to use for {call buck.python_binary /} and {call buck.python_test /}.  Valid
    values are:
    <ul>
        <li>
          <code>inplace</code>: builds exectuables which are only able to run from within the
          repository.  This style of packaging is significantly faster than <code>standalone</code>
          {sp}packages.
        </li>
        <li>
          <code>standalone</code> (default): builds self-contained executable packages that can be
          run outside of the repository.
        </li>
    </ul>
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'python' /}
  {param name: 'native_link_strategy' /}
  {param example_value: 'separate' /}
  {param description}
    The strategy used for pulling in native dependencies:
    <ul>
        <li>
          <code>merged</code>: Native dependencies which are first-order dependencies of{sp}
          <code>python_*</code> rules are linked as full, separate, shared libraries.  Transitive
          native dependencies are statically linked into a single monolithic shared library.  This
          is preferred to reduce the native code size and shared library count.
        </li>
        <li>
          <code>separate</code> (default): Transitive native dependencies are linked as full,
          separate, shared libraries.  This is prefererred for faster build-time speed.
        </li>
    </ul>
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'resources' /}
  {param description}
    The settings to control how Buck uses resources to schedule the work.
    When resource-aware scheduler is enabled, Buck will create more threads in attempt to
    run resource-independent work in parallel. Number of build threads is still controlled
    by <code>num_threads</code> option. Buck will also create a number of additional 
    threads that will be used for tasks that don't require CPU: network fetches,
    disk operations, etc. Total number of threads that Buck will operate is controlled by
    <code>managed_thread_count</code> option, that is, it includes build threads and
    additional threads.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'resources' /}
  {param name: 'resource_aware_scheduling_enabled' /}
  {param example_value: 'true' /}
  {param description}
    When set to <code>true</code>, Buck will attempt to use resource-aware scheduler.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'resources' /}
  {param name: 'managed_thread_count' /}
  {param example_value: '40' /}
  {param description}
    Buck will use <code>num_threads</code> threads for CPU intensive tasks 
    (e.g. local building) and it will use <code>managed_thread_count - num_threads</code>
    for other purposes. Thus, <code>managed_thread_count</code> value must be greater or
    equal to  <code>num_threads</code> value. If you don't specify this value, Buck will
    create built-in number of additional threads which equals to the number of CPU cores
    on the machine. These additional threads will be used for non-CPU work like
    networking, disk I/O and etc. But if one of the <code>num_threads</code> threads is
    free then Buck will probably use it for non-CPU stuff as well.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'resources' /}
  {param name: 'default_cpu_amount' /}
  {param example_value: '1' /}
  {param description}
    Amount of CPU resource required by arbitrary job which has no specific setting for its
    resource amounts. By default is 1 - a single CPU is required for the job to be completed.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'resources' /}
  {param name: 'default_memory_amount' /}
  {param example_value: '1' /}
  {param description}
    Amount of memory resource required by arbitrary job which has no specific setting for
    its resource amounts. By default is 1 - a single memory resource is required for the
    job to be completed. A single memory resource is an abstract value, currently it 
    equals to 100 Mb.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'resources' /}
  {param name: 'default_disk_io_amount' /}
  {param example_value: '1' /}
  {param description}
    Amount of disk I/O resource required by arbitrary job which has no specific setting for
    its resource amounts. A single disk resource is an abstract value. Think about it as
    like SSD can handle 50 parallel disk jobs with weight 1, while HDD can handle only
    20. Thus, if job needs to read or write a lot of data, it is better to assign a higher
    value for its disk I/O amount. This will reduce the risk to have several similar jobs
    running concurrently and performing huge disk I/O operations, slowing down build itself
    and system performance.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'resources' /}
  {param name: 'default_network_io_amount' /}
  {param example_value: '1' /}
  {param description}
    A single network resource is an abstract value. Think about it as Ethernet can handle 
    50 parallel network jobs with weight 1. Slower network interfaces can handle less
    amount of jobs. If job needs to send  or receive a lot of data, it is better to assign
    a higher value for its network I/O amount. 
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'resources' /}
  {param name: 'max_memory_resource' /}
  {param example_value: '30' /}
  {param description}
    Maximum memory resource available to Buck. By default is size of Java heap divided by
    100 Mb. A single memory resource is an abstract value, currently it equals to 100 Mb.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'resources' /}
  {param name: 'max_disk_io_resource' /}
  {param example_value: '30' /}
  {param description}
    Maximum disk I/O resource available to Buck. By default the value is 50. Think about 
    it as like SSD can handle 50 parallel disk jobs with weight 1, while HDD can handle only
    20. Thus, if job needs to read or write a lot of data, it should require higher disk I/O
    resource.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'resources' /}
  {param name: 'max_network_io_resource' /}
  {param example_value: '30' /}
  {param description}
    Maximum disk I/O resource available to Buck. By default the value is 30. Think about it
    as Ethernet can handle 50 parallel network jobs with weight 1.
    Slower network interfaces can handle less amount of jobs. If job needs to send or 
    receive a lot of data, it should require higher network I/O resource.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'resources_per_rule' /}
  {param description}
    <p>
      This section contains required resource amounts for various build rules. If amount for
      some build rule is not specified in this section, then amount of 1 (CPU), 1 (Memory),
      0 (disk i/o) and 0 (network i/o) is used. Amounts are used in local building, so in most
      cases build rule will require 0 for network I/O unless it fetches any data from network.
      Rule's name is constructed by converting the camel-style class name of the <code>BuildRule</code> 
      in Buck's source code (e.g. <code>MyBuildRule</code>) into 
      lower underscored name (e.g. <code>my_build_rule</code>).
    </p>
    {literal}<pre class="prettyprint lang-ini">
[resources_per_rule]
  cxx_link = 1, 1, 5, 0
  android_binary = 8, 30, 30, 0
     </pre>{/literal}
    <p>
      Buck will use the defined resource amounts during the build process in order to attempt
      to use all available resources.
    </p>
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'rust' /}
  {param description}
    The settings to control how Buck builds <code>rust_*</code> rules.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'rust' /}
  {param name: 'compiler' /}
  {param example_value: '/usr/local/bin/rustc' /}
  {param description}
    The path that Buck should use to compile Rust files.  By default, it checks your{sp}
    <code>PATH</code>.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'test' /}
  {param description}
    The settings to control how Buck runs tests.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'test' /}
  {param name: 'timeout' /}
  {param example_value: '300000' /}
  {param description}
    The number of miliseconds per test to allow before stopping the test and reporting a failure.
    The default is no timeout.  Not all <code>*_test</code> rules utilize this value.  A JUnit test
    can overide this via the <code>@Test</code> annotation.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'test' /}
  {param name: 'rule_timeout' /}
  {param example_value: '1200000' /}
  {param description}
    The number of miliseconds per <code>*_test</code> rule to allow before stopping it and reporting
    a failure.  The default is no timeout.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'test' /}
  {param name: 'external_runner' /}
  {param example_value: 'command args...' /}
  {param description}
    <p>
      This specifies an external test runner comamnd to use instead of Buck's built-in test runner.
      The external test runner is invoked by Buck after it has built all the test rules.  It passes
      the test runner the path to a file which contains a JSON-encoded list of test file infos via
      the <code>--buck-test-info [path]</code> command line option.
    </p>
    <p>
      Additionally, if {call buck.cmd_test /} is invoked with <code>-- [extra-runner-args]</code>,
      these will be passed to the external runner before <code>--buck-test-info</code>.
    </p>
    <p>
      The JSON-encoded test file contains an array of infos.  Those infos have the following fields:
      <ul>
        <li><code>target</code>: The {call buck.build_target /} of the test rule.</li>
        <li><code>type</code>: A string describing the type of the test.</li>
        <li>
          <code>command</code>: An array of command line arguemtns the test runner should invoke to
          run the test.
        </li>
        <li>
          <code>env</code>: A map of environments variables that should be defined by the test
          runner when running the test.
        </li>
        <li><code>labels</code>: An array of labels that are defined on the test rule.</li>
        <li>
          <code>contacts</code>: An array of contacts that are defined on the test rule.  These are
          typically user names or email addresses.
        </li>
      </ul>
    </p>
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'thrift' /}
  {param description}
    This section provides settings to locate required thrift components.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'thrift' /}
  {param name: 'compiler' /}
  {param example_value: '/usr/local/bin/thrift' /}
  {param description}
    The path or {call buck.build_target /} that builds the <a
    href="https://thrift.apache.org">thrift</a> compiler that Buck should use.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'thrift' /}
  {param name: 'compiler2' /}
  {param example_value: '/usr/local/bin/thrift2' /}
  {param description}
    The path or {call buck.build_target /} that builds the <a
    href="https://github.com/facebook/fbthrift">thrift2</a> compiler that Buck should use.  If this
    is unset, it defaults to the value of {call buckconfig.thrift_compiler /}.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'tools' /}
  {param description}
    This section tells Buck how to find certain tools e.g. how the Java compilation
    occurs and how auxiliary tools are used e.g. the <a
    href="http://proguard.sourceforge.net/">ProGuard</a> Java class file
    optimizer which is used as part of the Android build process.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'tools' /}
  {param name: 'javac' /}
  {param description}
    The <code>javac</code> option is a path to a program that acts like Java javac.
    When set, buck uses this program instead of the system Java compiler.
    When neither this nor {call buckconfig.tools_java_jar /} is set, Buck defaults
    to using the system compiler in-memory.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'tools' /}
  {param name: 'javac_jar' /}
  {param description}
    When this option is set to a JAR file, Buck loads the referenced compiler in-memory.
    When neither this nor {call buckconfig.tools_javac /} is set, Buck defaults
    to using the system compiler in-memory.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'tools' /}
  {param name: 'proguard' /}
  {param description}
    This option specifies the location of the JAR file to be used
    to invoke ProGuard. This overrides the default ProGuard JAR file that would have been
    picked up from the Android SDK. Here is an example setting:
  {/param}
  {param example_value : 'proguard/proguard-fork.jar' /}
{/call}

{call buckconfig.entry}
  {param section: 'tools' /}
  {param name: 'proguard-max-heap-size' /}
  {param example_value: '4096M' /}
  {param description}
    This option specifies how much memory is used when running proguard.
    Defaults to <code>1024M</code>. You may want to give ProGuard more memory to try and
    improve performance.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'tools' /}
  {param name: 'proguard-agentpath' /}
  {param example_value: '/Applications/YourKit_Java_Profiler_2015_build_15084.app/Contents/Resources/bin/mac/libyjpagent.jnilib' /}
  {param description}
    This option allows the specification of a Java profiling agent which
    is set with the <code>-agentpath</code> argument when the ProGuard jar file is executed.
    Typically this would be set in a <code>.buckconfig.local</code> configuration file for when you
    want to profile a build running on your local machine.
    Set this to the actual path of the installed agent on the machine where ProGuard will run.
  {/param}
{/call}

{call buckconfig.section}
  {param name: 'ui' /}
  {param description}
    This section configures the appearance of Buck's command line interface.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'ui' /}
  {param name: 'always_sort_threads_by_time' /}
  {param example_value: 'true' /}
  {param description}
    Specifies whether the lines with information about building and testing
    threads should always be sorted by the time spent running the rules they are
    currently executing. When set to false, threads are only sorted if there are
    more threads than available lines (see{sp}
    {call buckconfig.ui_thread_line_limit /} for an option to configure this
    limit). Only effective when the super console is used.
    The default value is false.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'ui' /}
  {param name: 'thread_line_limit' /}
  {param example_value: '10' /}
  {param description}
    Specifies how many lines will be used to show the status of running threads
    during building and testing by default. Only effective when the super
    console is used. The value has to be a positive number.
    The default value is 10.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'ui' /}
  {param name: 'thread_line_limit_on_warning' /}
  {param example_value: '10' /}
  {param description}
    Specifies how many lines will be used to show the status of running threads
    during building and testing after a warning is reported. Only effective
    when the super console is used. The value has to be a positive number.
    Defaults to the value of {call buckconfig.ui_thread_line_limit /}.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'ui' /}
  {param name: 'thread_line_limit_on_error' /}
  {param example_value: '10' /}
  {param description}
    Specifies how many lines will be used to show the status of running threads
    during building and testing after an error is reported. Only effective
    when the super console is used. The value has to be a positive number.
    Defaults to the value of {call buckconfig.ui_thread_line_limit /}.
  {/param}
{/call}

{call buckconfig.entry}
  {param section: 'unknown_flavors_messages' /}
  {param name: 'unknown_flavors_messages' /}
  {param description}
    Specify messages for flavors. The message is used in case of an error with the flavors and
    it can be used to help debugging or provide suggestions for a fix. The name is a common Java
    Regex pattern like <code>android-*</code> and the value is the message that will be shown.
    Messages in <code>.buckconfig</code> have priority over Buck's defaults and suggestions will be
    shown for all the matches.
    <pre class="prettyprint lang-ini">
        [unknown_flavors_messages]{\n}{sp}{sp}
            android-* = Make sure you have Android SDK & NDK installed and set up.
    </pre>
  {/param}
{/call}

    {/param}
  {/call}

{/template}
